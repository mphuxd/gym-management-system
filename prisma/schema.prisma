// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notes {
  id        String   @id @default(cuid())
  note      String   @default("")
  createdAt DateTime @default(now())
  updatedBy User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  updatedAt DateTime @default(now())
}

model History {
  id          String   @id @default(cuid())
  performedBy User     @relation(fields: [userId], references: [id])
  description String
  createdAt   DateTime @default(now())
  userId      String
}

model CheckIn {
  id          String   @id @default(cuid())
  checkInDate DateTime @default(now())
  member      Member   @relation(fields: [memberId], references: [id])
  memberId    String
}

model MembershipPlan {
  id             String       @id @default(cuid())
  planName       String       @unique
  planId         Int          @unique
  annualFee      Int?
  monthlyFee     Int?
  contractLength Length
  membership     Membership[]
}

model Membership {
  id                   String          @id @default(cuid())
  signUpDate           DateTime        @default(now())
  signUpLocation       String?
  signedUpBy           String?
  customerId           String?         @unique
  stripeSubscriptionId String?         @unique
  membershipEnds       DateTime?
  status               Status
  plan                 MembershipPlan? @relation(fields: [membershipPlanId], references: [id])
  member               Member?
  membershipPlanId     String?
}

model Contact {
  id            String  @id @default(cuid())
  streetAddress String
  city          String
  state         String
  zipcode       String
  country       String
  phoneNumber   String
  email         String
  member        Member?
}

model Member {
  id           String      @id @default(cuid())
  userId       String?     @unique @map("user_id")
  firstName    String
  middleName   String?     @default("-")
  lastName     String
  image        String?
  gender       Boolean?
  birthday     String?
  notes        String?
  membership   Membership? @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  membershipId String?     @unique
  contact      Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId    String      @unique
  user         User?
  checkIns     CheckIn[]
  updatedAt    DateTime    @updatedAt
  createdAt    DateTime    @default(now())
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  role          Role      @default(USER)
  member        Member?   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId      String?   @unique
  sessions      Session[]
  updatedAt     DateTime  @default(now()) @updatedAt
  history       History[]
  notes         Notes?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @map("user_id")
}

enum Role {
  USER
  EMPLOYEE
  ADMIN
}

enum Status {
  INACTIVE
  ACTIVE
  LATE
  CANCELLED
  BANNED
}

enum Length {
  DAY
  MONTH
  YEAR
}
