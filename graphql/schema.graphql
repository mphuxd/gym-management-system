### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Contact {
  city: String
  country: String
  email: String
  id: String
  member: Member
  phoneNumber: String
  state: String
  streetAddress: String
  zipcode: String
}

input ContactCreateInput {
  city: String
  country: String
  email: String
  id: String
  member: MemberCreateInput
  phoneNumber: String
  state: String
  streetAddress: String
  zipcode: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum Length {
  DAY
  MONTH
  YEAR
}

type Member {
  birthday: String
  contact: Contact
  contactId: String
  firstName: String
  gender: Boolean
  id: String
  image: String
  lastName: String
  membership: Membership
  membershipId: String
  middleName: String
  notes: String
  updatedAt: DateTime
  user: User
  userId: String
}

input MemberCreateInput {
  birthday: String
  contact: ContactCreateInput
  contactId: String
  firstName: String
  gender: Boolean
  id: String
  image: String
  lastName: String
  membership: MembershipCreateInput
  membershipId: String
  middleName: String
  notes: String
  updatedAt: DateTime
  user: UserCreateInput
  userId: String
}

type Membership {
  id: String
  member: Member
  membershipEnds: String
  membershipPlanId: String
  plan: MembershipPlan
  signUpDate: DateTime
  signUpLocation: String
  signedUpBy: String
  status: Status
}

input MembershipCreateInput {
  id: String
  member: MemberCreateInput
  membershipEnds: String
  membershipPlanId: String
  plan: MembershipPlanCreateInput
  signUpDate: DateTime
  signUpLocation: String
  signedUpBy: String
  status: Status
}

type MembershipPlan {
  annualFee: Int
  contractLength: Length
  id: String
  membership: [Membership]
  monthlyFee: Int
  planId: Int
  planName: String
}

input MembershipPlanCreateInput {
  annualFee: Int
  contractLength: Length
  membership: [MembershipCreateInput]
  monthlyFee: Int
  planId: Int
  planName: String
}

type Mutation {
  createMember(birthday: String!, contact: ContactCreateInput!, firstName: String!, gender: Boolean, image: String, lastName: String!, membership: MembershipCreateInput!, middleName: String, notes: String, userId: String!): Member!
}

type Query {
  users: [User]!
}

enum Role {
  ADMIN
  EMPLOYEE
  USER
}

type Session {
  expires: DateTime
  id: String
  sessionToken: String
  user: User
  userId: String
}

input SessionCreateInput {
  expires: DateTime
  id: String
  sessionToken: String
  user: UserCreateInput
  userId: String
}

enum Status {
  ACTIVE
  BANNED
  CANCELLED
  INACTIVE
  LATE
}

type User {
  email: String
  emailVerified: DateTime
  id: String
  member: Member
  memberId: String
  role: Role
  sessions: [Session]
  updatedAt: DateTime
  username: String
}

input UserCreateInput {
  email: String
  emailVerified: DateTime
  id: String
  member: MemberCreateInput
  memberId: String
  role: Role
  sessions: [SessionCreateInput]
  updatedAt: DateTime
  username: String
}